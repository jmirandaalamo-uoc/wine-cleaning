knitr::opts_chunk$set(echo = TRUE)
titanicDataset <- read.csv('./titanic.csv',stringsAsFactors = FALSE, header = TRUE, sep="," , dec=".")
str(titanicDataset)
titanicDataset <- titanicDataset[ , !names(titanicDataset) %in% c("PassengerId","Name", "Ticket")]
titanicDataset <- titanicDataset[ , !names(titanicDataset) %in% c("PassengerId","Name", "Ticket")]
titanicDataset <- titanicDataset[ , !names(titanicDataset) %in% c("PassengerId","Name", "Ticket")]
titanicDataset
colSums(is.na(titanicDataset))
colSums(titanicDataset=="")
suppressWarnings(suppressMessages(library(VIM)))
install.packages("VIM")
suppressWarnings(suppressMessages(library(VIM)))
titanicDataset$Cabin[titanicDataset$Cabin==""]="Desconocido"
titanicDataset$Embarked[titanicDataset$Embarked ==""]="Desconocido"
titanicDataset$Age<- kNN(titanicDataset)$Age
colSums(is.na(titanicDataset))
colSums(titanicDataset=="")
boxplot.stats(titanicDataset$Survived)$out
boxplot.stats(titanicDataset$Age)$out
boxplot.stats(titanicDataset$SibSp)$out
boxplot.stats(titanicDataset$Parch)$out
boxplot.stats(titanicDataset$Fare)$out
write.csv(titanicDataset, "titanic_data_clean.csv")
View(titanicDataset)
library(nortest)
install.packages("nortest")
library(nortest)
alpha = 0.05
col.names = colnames(titanicDataset)
for (i in 1:ncol(titanicDataset)) {
if (i == 1) cat("Variables que no siguen una distribución normal:\n")
if (is.integer(titanicDataset[,i]) | is.numeric(titanicDataset[,i])) {
p_val = ad.test(titanicDataset[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Format output
if (i < ncol(titanicDataset) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(titanicDataset) - 1)) {
if (is.integer(titanicDataset[,i]) | is.numeric(titanicDataset[,i])) {
spearman_test = cor.test(titanicDataset[,i],
titanicDataset[,length(titanicDataset)],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(titanicDataset)[i]
}
}
length(titanicDataset)
i
spearman_test = cor.test(titanicDataset[,i],
titanicDataset[,length(titanicDataset)],
method = "spearman")
cor.test(titanicDataset[,i],
titanicDataset[,length(titanicDataset)],
method = "spearman")
titanicDataset[,i]
cor.test(titanicDataset[,2],
titanicDataset[,length(titanicDataset)],
method = "spearman")
length(titanicDataset)
cor.test(titanicDataset[,2], titanicDataset[,7], method = "spearman")
cor.test(titanicDataset[,4], titanicDataset[,7], method = "spearman")
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(titanicDataset) - 1)) {
if (is.integer(titanicDataset[,i]) | is.numeric(titanicDataset[,i])) {
spearman_test = cor.test(titanicDataset[,i],
titanicDataset[,length(titanicDataset)-2],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(titanicDataset)[i]
}
}
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(titanicDataset) - 1)) {
if (is.integer(titanicDataset[,i]) | is.numeric(titanicDataset[,i])) {
spearman_test = cor.test(titanicDataset[,i],
titanicDataset[,length(titanicDataset)-2],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(titanicDataset)[i]
}
}
print(corr_matrix)
# Cargamos los paquetes R que vamos a usar
library(ggplot2)
library(dplyr)
library(tidyr)
library(cluster)
# Establecemos el directorio de trabajo
setwd("C:/Users/user/OneDrive/UOC/Asignaturas 2do semestre/Tipología y ciclo de vida de los datos/PRAC2")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
winequality <- read.csv(url,stringsAsFactors = FALSE, header =TRUE, sep =";" )
str(winequality)
summary(winequality)
colSums(is.na(winequality))
colSums(is.na(winequality))
colSums(winequality=="")
winequality %>%
gather(atributos, valores) %>%
ggplot() +
aes(y=valores, fill=atributos) +
geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2, notch=FALSE) +
theme(legend.position="none") + # Remove legend
facet_wrap(~atributos, scales="free_y") +
labs(y="Valores", title="Atributos del vino - Gráfico de cajas")
boxplot.stats(winequality$citric.acid)$out
boxplot.stats(winequality$citric.acid)$out
boxplot.stats(winequality$density)$out
boxplot.stats(winequality$fixed.acidity)$out
boxplot.stats(winequality$free.sulfur.dioxide)$out
boxplot.stats(winequality$quality)$out
boxplot.stats(winequality$residual.sugar)$out
boxplot.stats(winequality$total.sulfur.dioxide)$out
boxplot.stats(winequality$total.sulfur.dioxide)$out
winequality <- arrange(winequality, -citric.acid)
head(winequality$citric.acid, n=5)
winequality <- arrange(winequality, -density)
head(winequality$density, n=5)
winequality <- arrange(winequality, -fixed.acidity)
head(winequality$fixed.acidity, n=5)
winequality <- arrange(winequality, -free.sulfur.dioxide)
head(winequality$free.sulfur.dioxide, n=5)
winequality <- arrange(winequality, -quality)
head(winequality$quality, n=5)
winequality <- arrange(winequality, -residual.sugar)
head(winequality$residual.sugar, n=5)
winequality <- arrange(winequality, -total.sulfur.dioxide)
head(winequality$total.sulfur.dioxide, n=5)
winequality <- arrange(winequality, quality)
head(winequality$quality, n=5)
winequality <- arrange(winequality, total.sulfur.dioxide)
head(winequality$total.sulfur.dioxide, n=5)
winequality <- winequality[-which.max(winequality$citric.acid),]
winequality <- winequality[-which.max(winequality$density),]
winequality <- winequality[-which.max(winequality$fixed.acidity),]
winequality <- winequality[-which.max(winequality$free.sulfur.dioxide),]
winequality <- winequality[-which.max(winequality$residual.sugar),]
winequality <- winequality[-which.max(winequality$total.sulfur.dioxide),]
# Vemos cómo se distribuyen los valores
summary(winequality[,"quality"])
table(winequality$quality)
winequality["quality_disc"] <- cut(winequality$"quality", breaks = c(0,5,6,9), labels = c("Baja", "Media", "Alta"))
df_quality <- winequality[,12:13]
df_quality %>%
gather(atributos, valores) %>%
ggplot() +
aes(x=valores, fill=atributos) +
geom_bar(colour="black", show.legend=FALSE) +
facet_wrap(~atributos, scales="free_x") +
labs(x="Valores", y="Frecuencia",
title="Calidad del vino blanco - Histograma")
library(nortest)
alpha = 0.05
col.names = colnames(winequality)
for (i in 1:ncol(winequality)) {
if (i == 1) cat("Variables que no siguen una distribución normal:\n")
if (is.integer(winequality[,i]) | is.numeric(winequality[,i])) {
p_val = ad.test(winequality[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Format output
if (i < ncol(winequality) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
View(winequality)
library(nortest)
alpha = 0.05
col.names = colnames(winequality)
for (i in 1:ncol(winequality)) {
if (i == 1) cat("Variables que no siguen una distribución normal:\n")
if (is.integer(winequality[,i]) | is.numeric(winequality[,i])) {
p_val = ad.test(winequality[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Format output
if (i < ncol(winequality) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
df <- winequality[,1:11]
head(df)
library(corrplot)
cor(df)
corrplot(cor(df), type="upper", method="ellipse", tl.cex=0.9)
df <- select(df,-1,-4,-7,-8)
head(df)
d <- daisy(df)
resultados <- rep(0, 10)
for (i in c(2,3,4,5,6,7))
{
fit           <- kmeans(df, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:7,resultados[2:7],type="o",col="blue",pch=0,xlab="Número de clusters",ylab="Silueta")
fit           <- kmeans(df, 2)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[2] <- mean(sk[,3])
clusplot(df, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
View(df_quality)
View(df)
View(winequality)
View(winequality)
quality
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality_disc
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
summary(modelo1)$r.squared
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality_disc
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
summary(modelo1)$r.squared
modelo1
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
modelo1
summary(modelo1)
df <- winequality[,1:13]
head(df)
library(corrplot)
cor(df)
df <- winequality[,1:12]
head(df)
library(corrplot)
cor(df)
corrplot(cor(df), type="upper", method="ellipse", tl.cex=0.9)
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
modelo2 <- lm(calidad ~ alcohol, data = winequality)
summary(modelo2)
summary(modelo1)
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality_disc
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
modelo2 <- lm(calidad ~ alcohol, data = winequality)
summary(modelo1)
modelo1
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality
# Generación de varios modelos
modelo1 <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
modelo2 <- lm(calidad ~ alcohol, data = winequality)
summary(modelo1)
#Regresores cuantitativos
acidez = winequality$volatile.acidity
acido_citrico = winequality$citric.acid
calorias = winequality$chlorides
dioxido = winequality$free.sulfur.dioxide
ph = winequality$pH
sulfitos = winequality$sulphates
alcohol = winequality$alcohol
# Variable a predecir
calidad = winequality$quality
# Generación de varios modelos
modelo <- lm(calidad ~ acidez + acido_citrico + calorias + dioxido +
ph + sulfitos + alcohol, data = winequality)
# Resultado del modelo
summary(modelo)
modelo2 <- lm(calidad ~ acidez + calorias + dioxido +
sulfitos + alcohol, data = winequality)
summary(modelo2)
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
automoviles.turbo.precios <- winequality[winequality$quality_disc == "Baja",]$alcohol
winequality_alta_alcohol
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
winequality_baja_alcohol <- winequality[winequality$quality_disc == "Baja",]$alcohol
t.test(winequality_alta_alcohol, winequality_baja_alcohol, alternative = "less")
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
winequality_baja_alcohol <- winequality[winequality$quality_disc == "Baja",]$alcohol
t.test(winequality_alta_alcohol, winequality_baja_alcohol)
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
winequality_baja_alcohol <- winequality[winequality$quality_disc == "Baja",]$alcohol
t.test(winequality_alta_alcohol, winequality_baja_alcohol, alternative = "less")
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
winequality_baja_alcohol <- winequality[winequality$quality_disc == "Baja",]$alcohol
t.test(winequality_baja_alcohol, winequality_alta_alcohol, alternative = "less")
winequality_alta_alcohol <- winequality[winequality$quality_disc == "Alta",]$alcohol
winequality_baja_alcohol <- winequality[winequality$quality_disc == "Baja",]$alcohol
t.test(winequality_baja_alcohol, winequality_alta_alcohol, alternative = "less")
winequality_alta_pH <- winequality[winequality$quality_disc == "Alta",]$pH
winequality_baja_pH <- winequality[winequality$quality_disc == "Baja",]$pH
t.test(winequality_baja_pH, winequality_alta_pH, alternative = "less")
winequality_alta_sulphates <- winequality[winequality$quality_disc == "Alta",]$sulphates
winequality_baja_sulphates <- winequality[winequality$quality_disc == "Baja",]$sulphates
t.test(winequality_baja_sulphates, winequality_alta_sulphates, alternative = "less")
winequality_alta_free.sulfur.dioxide <- winequality[winequality$quality_disc == "Alta",]$free.sulfur.dioxide
winequality_baja_free.sulfur.dioxide <- winequality[winequality$quality_disc == "Baja",]$free.sulfur.dioxide
t.test(winequality_baja_free.sulfur.dioxide, winequality_alta_free.sulfur.dioxide, alternative = "less")
winequality_alta_free.sulfur.dioxide <- winequality[winequality$quality_disc == "Alta",]$free.sulfur.dioxide
winequality_baja_free.sulfur.dioxide <- winequality[winequality$quality_disc == "Baja",]$free.sulfur.dioxide
t.test(winequality_alta_free.sulfur.dioxide, winequality_baja_free.sulfur.dioxide, alternative = "less")
winequality_alta_chlorides <- winequality[winequality$quality_disc == "Alta",]$chlorides
winequality_baja_chlorides <- winequality[winequality$quality_disc == "Baja",]$chlorides
t.test(winequality_alta_chlorides, winequality_baja_chlorides, alternative = "less")
winequality_alta_citric.acid <- winequality[winequality$citric.acid == "Alta",]$citric.acid
winequality_baja_citric.acid <- winequality[winequality$citric.acid == "Baja",]$citric.acid
t.test(winequality_alta_citric.acid, winequality_baja_citric.acid, alternative = "less")
winequality_alta_citric.acid <- winequality[winequality$quality_disc == "Alta",]$citric.acid
winequality_baja_citric.acid <- winequality[winequality$quality_disc == "Baja",]$citric.acid
t.test(winequality_alta_citric.acid, winequality_baja_citric.acid, alternative = "less")
winequality_alta_volatile.acidity <- winequality[winequality$quality_disc == "Alta",]$volatile.acidity
winequality_baja_volatile.acidity <- winequality[winequality$quality_disc == "Baja",]$volatile.acidity
t.test(winequality_alta_volatile.acidity, winequality_baja_volatile.acidity, alternative = "less")
